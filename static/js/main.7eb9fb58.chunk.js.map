{"version":3,"sources":["App.js","components/PageDescription.jsx","components/TypingDiv.jsx","serviceWorker.js","index.js"],"names":["App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAwBeA,G,YCpBeC,Y,MCUNA,Y,+KFJNA,cGEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7eb9fb58.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import { Provider } from \"react-redux\";\n// import { createStore, applyMiddleware } from \"redux\";\n// import combinedReducer from \"./store/combinedReducer\";\nimport \"./App.css\";\nimport PageDescription from \"./components/PageDescription\";\nimport TypingDiv from \"./components/TypingDiv\";\n\n// const store = createStore(combinedReducer, applyMiddleware());\n\nclass App extends Component {\n  render() {\n    return (\n      // <Provider store={store}>\n      <div className=\"App\">\n        <PageDescription />\n        <br />\n        <TypingDiv />\n      </div>\n      // </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nimport \"../styles/description.css\";\n\nclass PageDescription extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"description-container\">\n        <b className=\"page-title\">タイピングアプリのプロトタイプ</b>\n        <br />\n        寿限無寿限無 五劫の擦り切れ 海砂利水魚の 水行末 雲来末 風来末\n        <br />\n        食う寝る処に 住む処 藪ら柑子の 藪柑子\n        <br />\n        パイポ パイポ パイポの シューリンガン\n        <br />\n        シューリンガンの グーリンダイ\n        <br />\n        グーリンダイの ポンポコピーの ポンポコナの\n        <br />\n        長久命の 長助\n      </div>\n    );\n  }\n}\n\nexport default PageDescription;\n","// libraries\nimport React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n\n// actions\n// import {\n//   updateCurrentTime,\n//   updateTypoCount,\n//   resetState\n// } from \"../store/actions\";\n\n// css\nimport \"../styles/typing.css\";\n\nclass TypingDiv extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // 今後ランダムな単語の配列からタイピング文を作りたいので，配列にしている．\n      typingArr: [\n        \"jugemu\",\n        \"jugemu\",\n        \"gokounosurikire\",\n        \"kaijarisuigyono\",\n        \"suigyoumatsu\",\n        \"fuuraimatsu\",\n        \"unraimatsu\",\n        \"kuunerutokoroni\",\n        \"sumutokoro\",\n        \"yaburakoujino\",\n        \"burakouji\",\n        \"paipo\",\n        \"paipo\",\n        \"paipono\",\n        \"shu-ringann\",\n        \"shu-ringannno\",\n        \"gu-rindai\",\n        \"gu-rindaino\",\n        \"ponpokopi-no\",\n        \"ponpokonano\",\n        \"choukyuumeino\",\n        \"chousuke\"\n      ],\n      currentIdx: 0,\n      typo: false,\n      typoCount: 0,\n      startFlag: false,\n      endFlag: false,\n      time: 0\n    };\n  }\n\n  _onKeyDown = e => {\n    // first call\n    if (!this.state.startFlag) {\n      this.setState({\n        startFlag: true // 開始フラグ true\n      });\n      const start = new Date().getTime();\n      // タイマーセット\n      this.timer = setInterval(() => {\n        this.setState({\n          time: new Date().getTime() - start\n        });\n      }, 10);\n    }\n\n    // 終了判定が入るまで\n    if (!this.state.endFlag) {\n      // 押されたキーと現在の文字が一致したら\n      if (e.key === this.state.typingArr.join(\" \")[this.state.currentIdx]) {\n        this.setState({\n          typo: false, // タイポなし\n          currentIdx: this.state.currentIdx + 1 // 次のidxへ\n        });\n      }\n      // タイポしたら\n      else {\n        this.setState({\n          typo: true, // タイポ true\n          typoCount: this.state.typoCount + 1 // タイポ回数 + 1\n        });\n      }\n\n      // 最終文字の入力が終了したら\n      if (this.state.currentIdx + 1 >= this.state.typingArr.join(\" \").length) {\n        this.setState({\n          endFlag: true // 終了フラグ true\n        });\n        clearInterval(this.timer); // タイマー停止\n      }\n    }\n  };\n\n  // リセットボタンクリック時\n  _onResetClick = () => {\n    // state リセット\n    this.setState({\n      currentIdx: 0,\n      typo: false,\n      typoCount: 0,\n      startFlag: false,\n      endFlag: false,\n      time: 0\n    });\n    // タイマー停止\n    clearInterval(this.timer);\n  };\n\n  render() {\n    return (\n      <>\n        <div\n          className=\"typing-div\"\n          id=\"typing\"\n          onKeyDown={e => this._onKeyDown(e)}\n          tabIndex={0}\n        >\n          {/* 文字列先頭から現在の文字手前まで */}\n          <span className=\"done-font\">\n            {this.state.typingArr.join(\" \").slice(0, this.state.currentIdx)}\n          </span>\n\n          {/* 現在の文字 */}\n          <span\n            className={this.state.typo ? \"current-font-typo\" : \"current-font\"}\n          >\n            {this.state.typingArr.join(\" \")[this.state.currentIdx]}\n          </span>\n\n          {/* 現在の文字以降の文字列 */}\n          <span className=\"yet-font\">\n            {this.state.typingArr\n              .join(\" \")\n              .slice(\n                this.state.currentIdx + 1,\n                this.state.typingArr.join(\" \").length\n              )}\n          </span>\n        </div>\n\n        {/* 結果ブロック */}\n        <div className=\"result-container\">\n          <button onClick={() => this._onResetClick()}>リセット</button>\n          <ul>\n            <div>タイポ回数：{this.state.typoCount}</div>\n            <div ref={ref => (this.time = ref)}>\n              タイム：{this.state.time / 1000}\n            </div>\n          </ul>\n        </div>\n      </>\n    );\n  }\n}\n\n// const sharedState = state => ({\n//   currentTime: state.currentTimeState.currentTime,\n//   typoCount: state.typoCountState.typoCount\n// });\n\n// const actions = dispatch => ({\n//   updateCurrentTime: currentTime => dispatch(updateCurrentTime(currentTime)),\n//   updateTypoCount: typoCount => dispatch(updateTypoCount(typoCount)),\n//   resetState: () => dispatch(resetState())\n// });\n\n// export default connect(sharedState, actions)(TypingDiv);\n\nexport default TypingDiv;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}